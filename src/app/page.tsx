"use client"

import React, { useEffect } from "react"
// next
import { useRouter } from "next/navigation"
import Image from "next/image"

export default function Home() {
  const router = useRouter()

  const clientId = process.env.NEXT_PUBLIC_CLIENT_ID?.toString() || ""
  const clientSecret = process.env.NEXT_PUBLIC_CLIENT_SECRET?.toString() || ""
  const redirectURILink = "http://localhost:3000"

  const [clientAccessToken, setClientAccessToken] = React.useState("")
  const [isAuthorized, setIsAuthorized] = React.useState(false)
  const [userData, setUserData] = React.useState({
    display_name: "",
    id: "",
    images: [
      {
        url: ""
      }
    ],
    external_urls: {
      spotify: ""
    }
  })
  const [userTracks, setUserTracks] = React.useState([])

  useEffect(() => {
    checkHasAuthCode()
  }, [])
  const [playlistData, setPlaylistData] = React.useState({
    total: 0,
    items: [
      {
        name: ""
      }
    ]
  })

  useEffect(() => {
    if (clientAccessToken) {
      getCurrentUserProfile()
      getCurrentUserPlaylists()
      getCurrentUserTracks()
    }
  }, [clientAccessToken])

  function checkHasAuthCode() {
    const url = new URL(window.location.href)
    const urlParams = new URLSearchParams(url.search)
    if (urlParams.has("code")) {
      const clientCode = urlParams.get("code") || ""
      exchangeToken(clientCode)
    }
  }

  // 1. request code from spotify
  function requestAccess(e: React.MouseEvent<HTMLButtonElement>) {
    e.preventDefault()
    const authBaseURL = "https://accounts.spotify.com/authorize"
    const scopes = "user-read-private playlist-read-private user-library-read"
    const params = new URLSearchParams({
      client_id: clientId,
      response_type: "code",
      scope: scopes,
      redirect_uri: redirectURILink
    }).toString()
    const authURL = `${authBaseURL}?${params}`
    router.push(authURL)
  }

  // 2. exchange the code generated by spotify for an access token
  const exchangeToken = async (clientCode: string) => {
    const exchangeBaseURL = "https://accounts.spotify.com/api/token"
    try {
      const params = new URLSearchParams({
        grant_type: "authorization_code",
        code: clientCode,
        redirect_uri: redirectURILink
      }).toString()
      const exchangeURL = `${exchangeBaseURL}?${params}`
      const res = await fetch(exchangeURL, {
        method: "POST",
        headers: {
          "Content-Type": "application/x-www-form-urlencoded",
          Authorization: "Basic " + btoa(`${clientId}:${clientSecret}`)
        }
      })
      const data = await res.json()
      if (data) {
        const accessToken = data["access_token"]
        setClientAccessToken(accessToken)
        setIsAuthorized(true)
      } else {
        console.error("no data returned from spotify api token exchange")
      }
    } catch (err) {
      console.error(err)
    }
  }

  // clear the query params of the url
  function refreshCode(e: React.MouseEvent<HTMLButtonElement>) {
    e.preventDefault()
    window.location.search = ""
    setClientAccessToken("")
    setIsAuthorized(false)
  }

  // get current user's profile
  const getCurrentUserProfile = async () => {
    const userProfileURL = "https://api.spotify.com/v1/me"
    try {
      const res = await fetch(userProfileURL, {
        method: "GET",
        headers: {
          Authorization: "Bearer " + clientAccessToken
        }
      })
      const data = await res.json()
      if (data) {
        setUserData(data)
      } else {
        console.error("could not retrieve user profile data")
      }
    } catch (err) {
      console.error(err)
    }
  }

  // get current user's playlists
  const getCurrentUserPlaylists = async () => {
    const userPlaylistsURL = "https://api.spotify.com/v1/me/playlists"
    try {
      const res = await fetch(userPlaylistsURL, {
        method: "GET",
        headers: {
          Authorization: "Bearer " + clientAccessToken
        }
      })
      const data = await res.json()
      if (data) {
        setPlaylistData(data)
      } else {
        console.error("could not retrieve user profile playlists")
      }
    } catch (err) {
      console.error(err)
    }
  }

  // get current user's saved tracks
  const getCurrentUserTracks = async () => {
    const userTracksBaseURL = "https://api.spotify.com/v1/me/tracks?limit=50"
    let allTracks = [] as any
    try {
      let nextURL = userTracksBaseURL
      while (nextURL) {
        const res = await fetch(nextURL, {
          method: "GET",
          headers: {
            Authorization: "Bearer " + clientAccessToken
          }
        })
        const data = await res.json()
        if (data) {
          allTracks = allTracks.concat(data.items)
          nextURL = data.next
        } else {
          console.error("could not retrieve user saved tracks")
        }
      }
      setUserTracks(allTracks)
    } catch (err) {
      console.error(err)
    }
  }

  function updateAudioFeatures(trackName: string) {
    getAudioFeatures(trackName)
  }

  const getAudioFeatures = async (trackName: string) => {}

  return (
    <div>
      <p>Home</p>
      {/* Connect Button */}
      <div>
        <button onClick={requestAccess}>Connect</button>
      </div>
      {/* Refresh Button */}
      <div>
        <button onClick={refreshCode}>Refresh</button>
      </div>
      {/* Access Token */}
      <div>
        {isAuthorized ? (
          <>
            <p>authorized</p>
          </>
        ) : (
          <>
            <p>not authorized</p>
          </>
        )}
      </div>
      {/* User Data */}
      <div>
        {isAuthorized ? (
          <>
            <Image
              src={userData.images[1]?.url}
              alt="profile picture"
              className="w-24 h-24 rounded"
              width={100}
              height={100}
            />
            <p>
              {userData.display_name} - {userData.id}
            </p>
            <p>{userData.external_urls.spotify}</p>
          </>
        ) : (
          <></>
        )}
      </div>
      {/* Playlist Data */}
      <div>
        {isAuthorized ? (
          <>
            <p>Playlists: ({playlistData.total})</p>
            <div>
              {playlistData.items.map((playlist, index) => (
                <p>
                  <button>
                    {index}. {playlist.name}
                  </button>
                </p>
              ))}
            </div>
          </>
        ) : (
          <></>
        )}
      </div>
      <div className="grid grid-cols-2">
        {/* Tracks Data */}
        <div>
          {isAuthorized ? (
            <>
              <p>Tracks: ({userTracks.length})</p>
              <div>
                {userTracks.map((track: any, index) => (
                  <p>
                    <button
                      onClick={() => updateAudioFeatures(track.track.name)}
                    >
                      {index}. {track.track.name}
                    </button>
                  </p>
                ))}
              </div>
            </>
          ) : (
            <></>
          )}
        </div>
        {/* Audio Features */}
        <div>
          {isAuthorized ? (
            <>
              <p>audio features</p>
            </>
          ) : (
            <></>
          )}
        </div>
      </div>
    </div>
  )
}
